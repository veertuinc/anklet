// Code generated by generate-plugins. DO NOT EDIT.
// Code generated by generate-plugins. DO NOT EDIT.
// Code generated by generate-plugins. DO NOT EDIT.

package plugins

import (
	"context"
	"fmt"

	"github.com/veertuinc/anklet/internal/config"
	"github.com/veertuinc/anklet/internal/plugins/plugin"
	
	// Auto-generated plugin imports
	_ "github.com/veertuinc/anklet/plugins/handlers/github"
	_ "github.com/veertuinc/anklet/plugins/receivers/github"
)

func Run(
	workerCtx context.Context,
	pluginCtx context.Context,
	pluginCancel context.CancelFunc,
) (context.Context, error) {
	ctxPlugin, err := config.GetPluginFromContext(pluginCtx)
	if err != nil {
		return pluginCtx, err
	}
	if ctxPlugin.Plugin == "" {
		return pluginCtx, fmt.Errorf("plugin is not set in yaml:plugins:%s:plugin", ctxPlugin.Name)
	}
	
	// Get plugin from global registry
	pluginImpl, exists := plugin.Get(ctxPlugin.Plugin)
	if !exists {
		return pluginCtx, fmt.Errorf("plugin '%s' not found in registry", ctxPlugin.Plugin)
	}
	
	// Handle context cancellation for handlers (receivers handle this internally)
	if pluginImpl.Type() == "handler" {
		select {
		case <-pluginCtx.Done():
			pluginCancel()
			return pluginCtx, nil
		default:
			// Continue with plugin execution
		}
	}
	
	// Execute the plugin
	updatedPluginCtx, err := pluginImpl.Run(workerCtx, pluginCtx, pluginCancel)
	if err != nil {
		return updatedPluginCtx, fmt.Errorf("error running %s plugin: %s", ctxPlugin.Plugin, err.Error())
	}
	
	return updatedPluginCtx, nil
}
